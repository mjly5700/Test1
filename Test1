<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>تطبيق إدارة بيانات الطلاب</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Tajawal', sans-serif;
            direction: rtl;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 900px;
        }
        .card {
            background-color: #fff;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border-radius: 12px;
            padding: 2rem;
        }
        .btn-primary {
            background-color: #4f46e5;
            color: #fff;
            border-radius: 8px;
            transition: background-color 0.2s;
        }
        .btn-primary:hover {
            background-color: #4338ca;
        }
        .form-input, .form-select {
            border: 1px solid #d1d5da;
            border-radius: 8px;
            padding: 0.75rem;
            width: 100%;
        }
        .table-header {
            background-color: #e2e8f0;
        }
        .table-row {
            border-bottom: 1px solid #e2e8f0;
        }
        .table-row:nth-child(even) {
            background-color: #f8fafc;
        }
        .action-button {
            cursor: pointer;
            transition: transform 0.2s;
        }
        .action-button:hover {
            transform: scale(1.1);
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
        .modal-content {
            background-color: #fefefe;
            padding: 20px;
            border-radius: 12px;
            max-width: 400px;
            width: 90%;
            text-align: center;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }
        .close-button {
            color: #aaa;
            float: left;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        .dropdown {
            position: relative;
            display: inline-block;
        }
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #fff;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 10;
            border-radius: 8px;
            padding: 8px;
            text-align: right;
            left: 0;
        }
        .dropdown-content button {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            width: 100%;
            text-align: right;
            border-radius: 6px;
        }
        .dropdown-content button:hover {
            background-color: #f1f1f1;
        }
        .dropdown:hover .dropdown-content {
            display: block;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #4f46e5;
            animation: spin 1s ease infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="p-6">
    <div class="container mx-auto">
        <!-- User ID Display -->
        <div class="card mb-4">
            <p class="text-sm text-gray-600 text-center">
                معرف المستخدم: <span id="userIdDisplay" class="font-bold text-gray-800 break-words">...</span>
            </p>
        </div>

        <!-- Student Data Form -->
        <div class="card mb-8">
            <h1 class="text-3xl font-bold text-center text-gray-800 mb-6">نموذج إدخال بيانات الطلاب</h1>
            <p class="text-center text-gray-600 mb-8">
                أدخل البيانات الثابتة لجميع الطلاب أولاً، ثم أضف بيانات الطلاب بشكل منفرد.
            </p>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Static Fields -->
                <div>
                    <label for="college" class="block text-sm font-medium text-gray-700 mb-1">الكلية</label>
                    <select id="college" class="form-select" required>
                        <option value="">-- اختر الكلية --</option>
                        <option value="كلية الشريعة والقانون">كلية الشريعة والقانون</option>
                        <option value="كلية التربية">كلية التربية</option>
                        <option value="كلية الآداب والعلوم الإنسانية">كلية الآداب والعلوم الإنسانية</option>
                        <option value="كلية العلوم">كلية العلوم</option>
                        <option value="كلية التجارة والاقتصاد">كلية التجارة والاقتصاد</option>
                        <option value="كلية الطب والعلوم الصحية">كلية الطب والعلوم الصحية</option>
                        <option value="كلية الهندسة">كلية الهندسة</option>
                        <option value="كلية الزراعة والأغذية والبيئة">كلية الزراعة والأغذية والبيئة</option>
                        <option value="كلية الصيدلة">كلية الصيدلة</option>
                        <option value="كلية الإعلام">كلية الإعلام</option>
                        <option value="كلية اللغات">كلية اللغات</option>
                        <option value="كلية طب الأسنان">كلية طب الأسنان</option>
                        <option value="كلية الحاسوب وتكنولوجيا المعلومات">كلية الحاسوب وتكنولوجيا المعلومات</option>
                        <option value="كلية التربية الرياضية">كلية التربية الرياضية</option>
                        <option value="كلية الطب البيطري">كلية الطب البيطري</option>
                        <option value="كلية البترول والموارد الطبيعية">كلية البترول والموارد الطبيعية</option>
                        <option value="كلية العلوم الطبية التطبيقية">كلية العلوم الطبية التطبيقية</option>
                        <option value="مركز الحاسب الآلي">مركز الحاسب الآلي</option>
                    </select>
                </div>
                <div>
                    <label for="level" class="block text-sm font-medium text-gray-700 mb-1">المستوى</label>
                    <select id="level" class="form-select" required>
                        <option value="">-- اختر المستوى --</option>
                        <option value="المستوى الأول">المستوى الأول</option>
                        <option value="المستوى الثاني">المستوى الثاني</option>
                        <option value="المستوى الثالث">المستوى الثالث</option>
                        <option value="المستوى الرابع">المستوى الرابع</option>
                        <option value="المستوى الخامس">المستوى الخامس</option>
                        <option value="المستوى السادس">المستوى السادس</option>
                    </select>
                </div>
                <div>
                    <label for="subject" class="block text-sm font-medium text-gray-700 mb-1">اسم المادة</label>
                    <input type="text" id="subject" class="form-input" placeholder="أدخل اسم المادة" required>
                </div>
                <div>
                    <label for="exam-date" class="block text-sm font-medium text-gray-700 mb-1">تاريخ الاختبار</label>
                    <input type="date" id="exam-date" class="form-input" required>
                </div>
            </div>

            <div class="flex justify-center mt-6">
                <button id="add-students-btn" class="w-full md:w-auto px-6 py-2 btn-primary">إضافة طالب أو أكثر</button>
            </div>
        </div>

        <!-- Dynamic student input fields -->
        <div id="dynamic-fields-container" class="card mt-8 hidden">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">إدخال بيانات الطلاب</h2>
            <form id="dynamic-form" onsubmit="addStudents(event)">
                <!-- Fields are injected here by JS -->
            </form>
        </div>

        <!-- Data table -->
        <div id="table-container" class="card mt-8 overflow-x-auto">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">كشف تفصيلي</h2>
            <table id="data-table" class="min-w-full divide-y divide-gray-200">
                <thead class="table-header">
                    <tr>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">اسم الطالب</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">الكلية</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">المستوى</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">المادة</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">تاريخ الاختبار</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider">المبلغ المتبقي</th>
                        <th class="px-6 py-3 text-right text-xs font-bold text-gray-700 uppercase tracking-wider action-col">إجراء</th>
                    </tr>
                </thead>
                <tbody id="student-table-body" class="bg-white divide-y divide-gray-200">
                    <!-- Data is loaded here from Firestore -->
                </tbody>
            </table>

            <div id="export-buttons-container" class="flex justify-center mt-6">
                <div class="dropdown">
                    <button class="w-full md:w-auto px-6 py-2 btn-primary">حفظ الكشف باسم</button>
                    <div id="saveDropdown" class="dropdown-content">
                        <button onclick="saveAs('xlsx')">Excel (.xlsx)</button>
                        <button onclick="saveAs('pdf')">PDF (.pdf)</button>
                        <button onclick="saveAs('docx')">Word (.docx)</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for student count input -->
    <div id="countModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('countModal')">&times;</span>
            <h3 class="text-xl font-bold mb-4">أدخل عدد الطلاب</h3>
            <input type="number" id="numStudentsInput" class="form-input mb-4" placeholder="العدد" min="1">
            <button onclick="createStudentFields()" class="px-6 py-2 btn-primary">تأكيد</button>
        </div>
    </div>

    <!-- Custom Message Modal -->
    <div id="messageModal" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeModal('messageModal')">&times;</span>
            <h3 id="messageTitle" class="text-xl font-bold mb-4"></h3>
            <p id="messageBody" class="mb-4"></p>
            <button onclick="closeModal('messageModal')" class="px-6 py-2 btn-primary">إغلاق</button>
        </div>
    </div>

    <!-- Required libraries -->
    <!-- Firestore and Firebase Auth -->
    <script type="module" src="https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js"></script>
    <script type="module" src="https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js"></script>
    <script type="module" src="https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js"></script>
    <!-- Exporting Libraries -->
    <script src="https://cdn.sheetjs.com/xlsx-0.20.1/package/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/docx/7.1.0/docx.min.js"></script>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, deleteDoc, doc, setLogLevel } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables for Firebase
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        setLogLevel('debug');

        let userId = null;

        // Listen for authentication state changes
        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                document.getElementById('userIdDisplay').textContent = userId;
                // Start listening to data once authenticated
                listenForStudents();
            } else {
                // If not authenticated, sign in anonymously
                await signInAnonymously(auth);
            }
        });
        
        // Use custom token if available
        if (initialAuthToken) {
            signInWithCustomToken(auth, initialAuthToken).catch(error => {
                console.error("Error signing in with custom token:", error);
            });
        }

        // DOM Elements
        const addStudentsBtn = document.getElementById('add-students-btn');
        const countModal = document.getElementById('countModal');
        const numStudentsInput = document.getElementById('numStudentsInput');
        const dynamicFieldsContainer = document.getElementById('dynamic-fields-container');
        const dynamicForm = document.getElementById('dynamic-form');
        const studentTableBody = document.getElementById('student-table-body');
        const messageModal = document.getElementById('messageModal');
        const messageTitle = document.getElementById('messageTitle');
        const messageBody = document.getElementById('messageBody');
        const exportButtonsContainer = document.getElementById('export-buttons-container');
        const actionColumnHeader = document.querySelector('.action-col');

        // Firestore collection reference
        const studentsCollection = () => collection(db, `artifacts/${appId}/users/${userId}/students`);

        // Function to show a custom message modal
        function showMessage(title, body) {
            messageTitle.textContent = title;
            messageBody.textContent = body;
            messageModal.style.display = 'flex';
        }

        // Function to close any modal
        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'none';
        }

        addStudentsBtn.addEventListener('click', function() {
            countModal.style.display = 'flex';
        });

        window.closeModal = closeModal;

        // Creates dynamic input fields for students
        window.createStudentFields = function() {
            const numStudents = numStudentsInput.value;
            if (numStudents && !isNaN(numStudents) && numStudents > 0) {
                dynamicForm.innerHTML = '';
                for (let i = 0; i < numStudents; i++) {
                    const studentFields = document.createElement('div');
                    studentFields.classList.add('grid', 'grid-cols-1', 'md:grid-cols-2', 'gap-4', 'mb-4', 'md:col-span-2', 'p-4', 'bg-gray-50', 'rounded-lg');
                    studentFields.innerHTML = `
                        <div>
                            <label for="student-name-${i}" class="block text-sm font-medium text-gray-700 mb-1">اسم الطالب ${i + 1}</label>
                            <input type="text" id="student-name-${i}" class="form-input" placeholder="أدخل اسم الطالب" required>
                        </div>
                        <div>
                            <label for="amount-due-${i}" class="block text-sm font-medium text-gray-700 mb-1">المبلغ المتبقي</label>
                            <input type="number" id="amount-due-${i}" class="form-input" placeholder="أدخل المبلغ المتبقي" required>
                        </div>
                    `;
                    dynamicForm.appendChild(studentFields);
                }
                const submitBtn = document.createElement('div');
                submitBtn.classList.add('md:col-span-2', 'flex', 'justify-center', 'mt-4');
                submitBtn.innerHTML = '<button type="submit" class="w-full md:w-auto px-6 py-2 btn-primary">إضافة إلى الكشف</button>';
                dynamicForm.appendChild(submitBtn);
                dynamicFieldsContainer.classList.remove('hidden');
                closeModal('countModal');
            } else {
                showMessage('خطأ في الإدخال', 'الرجاء إدخال عدد صحيح موجب.');
            }
        }

        // Adds students to Firestore
        window.addStudents = async function(e) {
            e.preventDefault();

            const college = document.getElementById('college').value;
            const level = document.getElementById('level').value;
            const subject = document.getElementById('subject').value;
            const examDate = document.getElementById('exam-date').value;

            if (!college || !level || !subject || !examDate) {
                showMessage('بيانات ثابتة مفقودة', 'الرجاء ملء جميع الحقول الثابتة أولاً.');
                return;
            }

            const numStudents = dynamicForm.querySelectorAll('input[id^="student-name"]').length;

            try {
                for (let i = 0; i < numStudents; i++) {
                    const studentNameInput = document.getElementById(`student-name-${i}`);
                    const amountDueInput = document.getElementById(`amount-due-${i}`);

                    if (studentNameInput && amountDueInput) {
                        const studentName = studentNameInput.value;
                        const amountDue = amountDueInput.value;

                        if (studentName && amountDue) {
                            await addDoc(studentsCollection(), {
                                studentName,
                                college,
                                level,
                                subject,
                                examDate,
                                amountDue: parseFloat(amountDue)
                            });
                        }
                    }
                }
                dynamicForm.reset();
                dynamicFieldsContainer.classList.add('hidden');
            } catch (e) {
                showMessage('خطأ في الحفظ', `حدث خطأ أثناء إضافة البيانات: ${e.message}`);
            }
        }

        // Listens to Firestore changes and updates the table
        function listenForStudents() {
            onSnapshot(studentsCollection(), (querySnapshot) => {
                studentTableBody.innerHTML = '';
                querySnapshot.forEach((doc) => {
                    const student = doc.data();
                    const docId = doc.id;
                    const newRow = document.createElement('tr');
                    newRow.classList.add('table-row');
                    newRow.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${student.studentName}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${student.college}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${student.level}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${student.subject}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${student.examDate}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${student.amountDue}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium action-col-data">
                            <button onclick="deleteRow('${docId}')" class="text-red-600 hover:text-red-900 action-button">حذف</button>
                        </td>
                    `;
                    studentTableBody.appendChild(newRow);
                });
            }, (error) => {
                console.error("Error listening to Firestore:", error);
            });
        }

        // Deletes a document from Firestore
        window.deleteRow = async function(docId) {
            try {
                await deleteDoc(doc(studentsCollection(), docId));
                showMessage('تم الحذف', 'تم حذف الطالب بنجاح.');
            } catch (e) {
                showMessage('خطأ في الحذف', `حدث خطأ أثناء حذف الطالب: ${e.message}`);
            }
        }

        // Main save function
        window.saveAs = async function(format) {
            const table = document.querySelector('#data-table');
            if (table.tBodies[0].rows.length === 0) {
                showMessage("لا توجد بيانات", "لا توجد بيانات في الجدول للتصدير.");
                return;
            }

            // Hide action columns and export buttons before capturing
            exportButtonsContainer.style.display = 'none';
            actionColumnHeader.style.display = 'none';
            document.querySelectorAll('.action-col-data').forEach(el => el.style.display = 'none');
            
            // Wait for DOM to update
            await new Promise(resolve => setTimeout(resolve, 50));

            try {
                if (format === 'xlsx') {
                    const ws = XLSX.utils.table_to_sheet(table);
                    const wb = XLSX.utils.book_new();
                    XLSX.utils.book_append_sheet(wb, ws, "Students");
                    XLSX.writeFile(wb, "كشف_بيانات_الطلاب.xlsx");
                } else if (format === 'pdf') {
                    const { jsPDF } = window.jspdf;
                    const tableElement = document.getElementById('table-container');
                    
                    const canvas = await html2canvas(tableElement, {
                        useCORS: true,
                        scale: 2,
                        logging: true
                    });
                    
                    const imgData = canvas.toDataURL('image/jpeg', 1.0);
                    const doc = new jsPDF('p', 'mm', 'a4');
                    const imgWidth = 210;
                    const pageHeight = 297;
                    const imgHeight = canvas.height * imgWidth / canvas.width;
                    let heightLeft = imgHeight;
                    let position = 0;

                    doc.addImage(imgData, 'JPEG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;

                    while (heightLeft >= 0) {
                        position = heightLeft - imgHeight;
                        doc.addPage();
                        doc.addImage(imgData, 'JPEG', 0, position, imgWidth, imgHeight);
                        heightLeft -= pageHeight;
                    }
                    doc.save('كشف_بيانات_الطلاب.pdf');

                } else if (format === 'docx') {
                    const tableRows = Array.from(table.tBodies[0].rows);
                    const tableData = tableRows.map(row => 
                        Array.from(row.cells).slice(0, 6).map(cell => new docx.Paragraph({
                            children: [new docx.TextRun({ text: cell.textContent, rightToLeft: true })],
                        }))
                    );

                    const tableHeaders = Array.from(table.tHead.rows[0].cells).slice(0, 6).map(header => new docx.Paragraph({
                        children: [new docx.TextRun({ text: header.textContent, bold: true, rightToLeft: true })],
                    }));

                    const doc = new docx.Document({
                        sections: [{
                            properties: {
                                page: {
                                    size: {
                                        orientation: docx.PageOrientation.PORTRAIT,
                                        width: 11906,
                                        height: 16838
                                    }
                                }
                            },
                            children: [
                                new docx.Paragraph({
                                    children: [new docx.TextRun({ text: "كشف تفصيلي ببيانات الطلاب", bold: true, size: 36, rightToLeft: true })],
                                    alignment: docx.AlignmentType.CENTER,
                                }),
                                new docx.Table({
                                    rows: [
                                        new docx.TableRow({ children: tableHeaders.reverse() }),
                                        ...tableData.map(row => new docx.TableRow({ children: row.reverse() }))
                                    ],
                                    margins: { top: 200, bottom: 200, left: 200, right: 200 },
                                }),
                            ],
                        }],
                    });

                    await docx.Packer.toBlob(doc).then(blob => {
                        saveAs(blob, "كشف_بيانات_الطلاب.docx");
                    });
                }
            } catch (e) {
                showMessage('خطأ في التصدير', `حدث خطأ: ${e.message}`);
            } finally {
                // Show action columns and export buttons again after completion
                exportButtonsContainer.style.display = 'flex';
                actionColumnHeader.style.display = 'table-cell';
                document.querySelectorAll('.action-col-data').forEach(el => el.style.display = 'table-cell');
            }
        }
    </script>
</body>
</html>
